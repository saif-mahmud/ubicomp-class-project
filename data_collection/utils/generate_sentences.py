import itertools
import numpy as np
from scipy.optimize import lsq_linear

# generate all sentences
def init_sentences(words, patterns):
    sentences = []
    for pattern in patterns.keys():
        psize = len(pattern)
        if(psize == 1):
            for i in patterns[pattern][0]:
                sentences.append(pattern[0] + " " + words[i])
        elif(psize == 2):
            for i,j in itertools.product(patterns[pattern][0], patterns[pattern][1]):
                if(pattern[1] == 'at1'):
                    sentences.append(pattern[0] + " " + words[i] + " " + "at" + " " + words[j])
                elif(pattern[1] == ''):
                    sentences.append(pattern[0] + " " + words[i] + " " + words[j])
                else:
                    sentences.append(pattern[0] + " " + words[i] + " " + pattern[1] + " " + words[j])
        elif(psize == 3):
            for i,j,k in itertools.product(patterns[pattern][0], patterns[pattern][1], patterns[pattern][2]):
                sentences.append(pattern[0] + " " + words[i] + " " + 
                pattern[1] + " " + words[j] + " " + pattern[2] + " " + words[k])
    return sentences

# calculate the frequency of each sentence
def calculate_frequency(words, sentences):
    freq = []
    ssize = len(sentences)
    wsize = len(words)
    # the occurance of a word in a sentense
    # s[i][j] is 1 iff word[j] exists in sentense[i]
    s = []
    for i in range(ssize):
        s.append([])
        for j in range(wsize):
            if (words[j] in sentences[i]):
                s[i].append(1)
            else:
                s[i].append(0)
    # the coefficient matrix of the equations
    A = []
    for i in range(wsize):
        A.append([])
        for j in range(ssize):
            if(i == 0): 
                A[i].append(1)
            else:
                A[i].append(s[j][0] - s[j][i])
    # the value of the equations 
    b = [0] * wsize
    b[0] = 1
    # solve for the least square solution, which is the frequency of each sentence
    freq = lsq_linear(A, b, (0.1 / ssize, 1))['x']
    return freq

# generate a single sentence
def generate_one_sentence(sentences, prefix):
    # rand is multiplied by the sum
    rand = np.random.random() * prefix[-1]
    # find the first value greater than x
    for i in range(len(sentences)):
        if(prefix[i] > rand):
            return sentences[i]
    return ""

# return n sentences
def generate_sentences(folds, reps_per_fold):
    # wordlist
    words = ['weather', 'news', 'time', 'home', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',
        'eight', 'nine', 'ten', 'traffic', 'message', 'alarm', 'music', 'volume', 'play', 'read',
        'previous', 'next', 'up', 'down', 'camera', "What's", 'the', 'at', "How's", 'check', "open", 
        "set", "send", "volume", "hang"]
    # pattern of the sentence
    patterns = {
        tuple(["What's the"]): [[0,1,2]],
        tuple(["What's the", "at"]): [[0,1], [3,4,5,6,7,8,9,10,11,12,13]],
        tuple(["What's the", "at1"]): [[2], [3]],
        tuple(["How's the"]): [[0,14]],
        tuple(["How's the", "at"]): [[0,14], [3]],
        tuple(["How's the", "at", "at"]): [[0,14], [3], [4,5,6,7,8,9,10,11,12,13]],
        tuple(["check"]): [[15, 1, 0, 14]],
        tuple(["check", "at"]): [[15, 1, 0, 14], [3,4,5,6,7,8,9,10,11,12,13]],
        tuple(["open"]): [[0,25,1,16,15,17]],
        tuple(["set"]): [[16,18]],
        tuple(["set", "at"]): [[16,18], [4,5,6,7,8,9,10,11,12,13]],
        tuple(["play"]): [[17]],
        tuple(["read"]): [[1,15]],
        tuple(["play", ""]): [[21,22], [17]],
        tuple(["read", ""]): [[21,22], [1,15]],
        tuple(["send"]): [[15]],
        tuple(["send", "at"]): [[15], [4,5,6,7,8,9,10,11,12,13]],
        tuple(["volume"]): [[23,24]],
        tuple(["hang"]): [[23]]
    }
    # sentences generated by words and patterns
    sentences = init_sentences(words, patterns)
    # the frequency each sentence should appear
    freq = calculate_frequency(words, sentences)
    # the prefix sum of freq
    prefix = [sum(freq[ : i + 1]) for i in range(len(freq))]
    retSentences = []
    for i in range(folds * reps_per_fold):
        sentence = generate_one_sentence(sentences, prefix)
        indices = []
        for word in sentence.split():
            indices.append(words.index(word))
        retSentences.append((' '.join([str(x) for x in indices]), sentence, None))
    return retSentences, {}